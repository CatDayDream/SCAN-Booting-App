# -*- coding: utf-8 -*-
# 首先导入本次所需要的库，最后一个csv是Python自带的csv表格操作库，这里我们需要把我们扫到的二维码信息都存入csv表格里。
# V3：加入线程锁
# V4：不用线程锁，直接用两个函数实现com3，4
# V5: 取消线程，直接用os.system(start)串行实现
# V6: 增加新平台装置的PCK下载
# V7: 增加6MD685的PCK下载
# V8: 1.使用pyQt进行GUI绘制，增加文本提示信息(scan_v8是主要程序文件,scan_ui是主程序的GUI代码文件,scan_running是运行计时器界面,scan_running_ui是计时器GUI代码文件)
#     2.增加检索和删改数据库的操作,输入CP号后显示数据库实时检索的数据,并在后续Booting操作时记录时间信息;
#     3.对路径进行统一存放，随用随读，增加应用程序的泛用性，同时增加自动检测当前工作站的操作，一并写入数据库;
#     4.实时检测串口状态，电源电流，同时也可以在程序界面中进行串口调整操作，利用可调电源的串口通信协议结合装置型号自动调节电源电压;
#     5.增加日志功能，主要用于自动记录数据库被占用时的Booting信息，以及其他一些DEBUG用的信息，方便未来维护.
#     6.将使用PCK文件大小来判断改为使用装置MLFB判断
# 目前存在的问题:
#     1.有些部分执行代码量太大，有概率会出现程序未响应情况，后续采用多线程可能会好一点
#     2.有些电源电流会波动可能会影响当前判断，如何消除这种波动是需要解决的问题
#
# V8.1: 1.在ui界面新增三个按钮，一个是自定义电压，一个是自动电压调0，还有一个是防止firmware启动后连接不上，出现问题但是无法重新输入的强制重启；
#          2.代码方面，使用共计3个线程，在主线程内处理ui界面，点击开始后循环判断是否连接上装置，以及firmwa启动后持续判断电流大小的三个线程，解决了
#          由于ui界面和耗时界面同时运行时，界面卡死的问题。
#          3.根据产线同事习惯，修改了新平台
# V9: 增加可以在一台装置正在写入时另外一台开始写入的功能
# V10: 根据经验重写代码和界面，全面进行优化
#      增加判断和结束FirmwareUpdate进程，使Booting的进程可以交替进行，最大化工作效率